/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package anwarassignment27;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author mohammad
 */
public class AnwarAssignment27 extends javax.swing.JFrame {

    /**
     * Creates new form anwarAssignment28
     */
    // Five parallel arrays to hold user data
    String[] firstNames;
    String[] lastNames;
    String[] allUserAges;
    String[] allUserIncomes;
    String[] postsPerUser;
    // Three parallel array to hold post data
    String[] instaPosts;
    String[] instaImages;
    String[] instaAuthors;
    // Three constant variables for URLS and Paths
    final String USER_DATA_FILE ="src/userData.txt";
    final String POST_DATA_FILE = "src/postData.txt";
    final String ERROR_URL = "https://fakeimg.pl/350x200/?text=Woops!%20Try%20Again&font=lobster";
    // One public function to rule them, one public function to find them
    // One public function to bring them all and in the GUI display them
    public AnwarAssignment27() {
        initComponents();
        // Initialize, load and display all user data
        initializeUserDataArrays();
        loadEveryonesData();
        displayEveryonesData();
        // Initialize, load and display all post data
        initializePostArrays();
        loadPostData();
        displayPostData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtUserFirstName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUserLastName = new javax.swing.JTextField();
        btnSubmitData = new javax.swing.JButton();
        txtUserAge = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtUserIncome = new javax.swing.JTextField();
        lblDataSubmission = new javax.swing.JLabel();
        txtUserPostsMade = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        lblAverageUserAge = new javax.swing.JLabel();
        lblAverageUserPosts = new javax.swing.JLabel();
        lblHighestUserAge = new javax.swing.JLabel();
        lblNumberOfUsers = new javax.swing.JLabel();
        lblAverageUserIncome = new javax.swing.JLabel();
        lblPostDataSubmission = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtPostURL = new javax.swing.JTextField();
        btnCreatePost = new javax.swing.JButton();
        txtPostData = new javax.swing.JTextField();
        lblPostSubmission = new javax.swing.JLabel();
        txtPostFirstName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        lblPostImage = new javax.swing.JLabel();
        btnDisplayNextPost = new javax.swing.JButton();
        lblPostLabel = new javax.swing.JLabel();
        lblPostAuthor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel1.setText("InstaPound");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel2.setText("A Pound of Instagram Data");

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel3.setText("(Disclaimer: Not affiliated with Instagram, no users were harmed in harvesting this data)");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel8.setText("Your Income");

        jLabel9.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel9.setText("Your First Name");

        jLabel10.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel10.setText("Your Last Name");

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel5.setText("Your Data:");

        btnSubmitData.setText("Submit Your Data");
        btnSubmitData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitDataActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel6.setText("Your Age");

        lblDataSubmission.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lblDataSubmission.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDataSubmission.setText("Don't worry, we'll only sell your data to everyone!");

        jLabel14.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel14.setText("Number of Posts You've Made");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(65, 65, 65)
                        .addComponent(txtUserLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(65, 65, 65)
                        .addComponent(txtUserFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(65, 65, 65)
                        .addComponent(txtUserIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(65, 65, 65)
                        .addComponent(txtUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(65, 65, 65)
                        .addComponent(txtUserPostsMade, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSubmitData, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addComponent(lblDataSubmission, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel5)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserPostsMade, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(btnSubmitData, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(lblDataSubmission, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel12.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel12.setText("Everyone's Data");

        lblAverageUserAge.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblAverageUserAge.setText("Average User Age: ");

        lblAverageUserPosts.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblAverageUserPosts.setText("Average Number of Posts Per User: ");

        lblHighestUserAge.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblHighestUserAge.setText("Oldest User Age:");

        lblNumberOfUsers.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblNumberOfUsers.setText("Number of Users:");

        lblAverageUserIncome.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblAverageUserIncome.setText("Average Income of Users:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAverageUserPosts, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAverageUserIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumberOfUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHighestUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAverageUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAverageUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAverageUserPosts, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNumberOfUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAverageUserIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblHighestUserAge, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblPostDataSubmission.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel7.setText("Make A Post");

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel4.setText("One Word to Describe Your Post");

        jLabel11.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel11.setText("Your Image URL");

        txtPostURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPostURLActionPerformed(evt);
            }
        });

        btnCreatePost.setText("Submit");
        btnCreatePost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePostActionPerformed(evt);
            }
        });

        lblPostSubmission.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lblPostSubmission.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPostSubmission.setText("Everyone will able to see your post!");

        jLabel15.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel15.setText("Your FIrst Name");

        javax.swing.GroupLayout lblPostDataSubmissionLayout = new javax.swing.GroupLayout(lblPostDataSubmission);
        lblPostDataSubmission.setLayout(lblPostDataSubmissionLayout);
        lblPostDataSubmissionLayout.setHorizontalGroup(
            lblPostDataSubmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblPostDataSubmissionLayout.createSequentialGroup()
                .addGroup(lblPostDataSubmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblPostDataSubmissionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPostSubmission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(lblPostDataSubmissionLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(lblPostDataSubmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11)
                            .addComponent(txtPostURL, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreatePost, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtPostData, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(lblPostDataSubmissionLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(txtPostFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        lblPostDataSubmissionLayout.setVerticalGroup(
            lblPostDataSubmissionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblPostDataSubmissionLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addGap(20, 20, 20)
                .addComponent(txtPostData, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPostURL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(txtPostFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(btnCreatePost, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPostSubmission)
                .addGap(22, 22, 22))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setToolTipText("");

        jLabel13.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel13.setText("View Posts");

        lblPostImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPostImage.setText("Image Loads Here. If these fields don't load, check the file path!");
        lblPostImage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                lblPostImageComponentShown(evt);
            }
        });

        btnDisplayNextPost.setText("Next Post");
        btnDisplayNextPost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayNextPostActionPerformed(evt);
            }
        });

        lblPostLabel.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lblPostLabel.setText("Post Label Loads Here");

        lblPostAuthor.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lblPostAuthor.setText("Post Author Loads Here");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnDisplayNextPost, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPostLabel)
                    .addComponent(jLabel13)
                    .addComponent(lblPostAuthor))
                .addGap(166, 166, 166))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPostImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(lblPostImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPostLabel)
                .addGap(18, 18, 18)
                .addComponent(lblPostAuthor)
                .addGap(18, 18, 18)
                .addComponent(btnDisplayNextPost, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblPostDataSubmission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(438, 438, 438)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(421, 421, 421)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jLabel3)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPostDataSubmission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPostURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPostURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPostURLActionPerformed

    private void btnCreatePostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePostActionPerformed
        // Declare and initialize post variables with their data
        String postText = txtPostData.getText();
        String postURL = txtPostURL.getText();
        String postAuthor = txtPostFirstName.getText();
        // Initialize data line to be inserted into file
        String dataLine = "\n" + postText + " " + postURL + " " + postAuthor;
        try{
            // Validate post variables
            validatePostData(postText, postURL, postAuthor);
            // Append post data to the file
            boolean successfullAppend = appendDataToFile("post_data", dataLine);
            
            if(successfullAppend){
                // If it is successfull, reset the textfields and display a success message
                txtPostData.setText("");
                txtPostURL.setText("");
                txtPostFirstName.setText("");
                lblPostSubmission.setText("Post submitted!");
                // Also refresh the arrays with new data
                initializePostArrays();
                loadPostData();
            }
        } catch (Exception exceptionErr){
            // Catch all errors and display appropriate help messages
            if(exceptionErr.getMessage().equals("no_data")){
                lblPostSubmission.setText("Please fill in both fields");
            } else if(exceptionErr.getMessage().equals("data_too_long")){
                lblPostSubmission.setText("Please only enter one word to describe your post and only your first name");
            } else if(exceptionErr.getMessage().equals("no_protocol")){
                lblPostSubmission.setText("Please enter a valid URL");
            }
        }        
    }//GEN-LAST:event_btnCreatePostActionPerformed

    private void lblPostImageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_lblPostImageComponentShown
        displayPostData();
    }//GEN-LAST:event_lblPostImageComponentShown

    private void btnDisplayNextPostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayNextPostActionPerformed
        displayPostData();
    }//GEN-LAST:event_btnDisplayNextPostActionPerformed

    private void btnSubmitDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitDataActionPerformed
        // Initialize age, income, first and last name variables
        String userAge = "";
        String userIncome = "";
        String userPostsMade = "";
        String userFirstName = txtUserFirstName.getText();
        String userLastName = txtUserLastName.getText();
        // Set the data append to false (to begin with)
        boolean successfullDataAppend = false;
        
        // Validate data and attempt appending to file
        try{
            // Attempt to parse user age and income as integer, if it works, then the data is valid
            // Then it can be converted back to a string, and appended to file
            userAge = Integer.toString(Integer.parseInt(txtUserAge.getText()));
            userIncome = Integer.toString(Integer.parseInt(txtUserIncome.getText()));
            userPostsMade = Integer.toString(Integer.parseInt(txtUserPostsMade.getText()));
            
            // Check if first/last name fields are empty and throw error 
            if(userFirstName.trim().isEmpty() || userLastName.trim().isEmpty()){
                throw new Exception("empty_fields");
            }
            // Create the String to be appended
            String dataLine = "\n" + userFirstName + " " + userLastName + " " + userAge + " " + userIncome + " " + userPostsMade;
            
            // Call function to append data and assign to a boolean result
            successfullDataAppend = appendDataToFile("user_data",dataLine);
        } catch(Exception error){
            // Catch all errors and display appropriate help messages
            if(error.getMessage().equals("empty_fields")){
                lblDataSubmission.setText("Please fill in all fields");
            } else{
                lblDataSubmission.setText("Please enter integers for income, age and posts made.");
            }
        }

        // Clear all text fields, if the appending the data worked and display success message
        if(successfullDataAppend){
            lblDataSubmission.setText("Data submitted!");
            txtUserAge.setText("");
            txtUserIncome.setText("");
            txtUserFirstName.setText("");
            txtUserLastName.setText("");
            txtUserPostsMade.setText("");
            // Update everyone's data (JPanel) to reflect file changes
            // Re-initialize arrays, load data from the files, display the new data
            initializeUserDataArrays();
            loadEveryonesData();
            displayEveryonesData();
        }
    }//GEN-LAST:event_btnSubmitDataActionPerformed
    
    private void initializeUserDataArrays(){
        // Try catch in case files don't exist
        try {
            // Read user data files and initialize arrays based on number of lines
            int userDataLines = (int) Files.lines(Paths.get(USER_DATA_FILE)).count();
            firstNames = new String[userDataLines];
            lastNames = new String[userDataLines];
            allUserAges = new String[userDataLines];
            allUserIncomes = new String[userDataLines];
            postsPerUser = new String[userDataLines];
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }
    private void initializePostArrays(){
        // Try catch in case files don't exist
        try {
            // Read post data files and initialize arrays based on number of lines
            int postDataLines = (int) Files.lines(Paths.get(POST_DATA_FILE)).count();
            instaPosts = new String[postDataLines];
            instaImages = new String[postDataLines];
            instaAuthors = new String[postDataLines];
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }
    private boolean appendDataToFile(String fileType, String data){
        // Try catch in case file doesn't exist or writing is not possible
        try {
            // Initialize post file
            File appendFile;
            // Set file equal to specific file based on provided type
            if(fileType.equals("post_data")){
                appendFile = new File(POST_DATA_FILE);
            } else{
                appendFile = new File(USER_DATA_FILE);
            }
            // Create file writer, set append to true
            FileWriter postFileWriter = new FileWriter(appendFile, true);
            // Create a buffer (to write)
            BufferedWriter postFileBuffer = new BufferedWriter(postFileWriter);
            // Write the data
            postFileBuffer.write(data);
            // Close buffer and file-writer
            postFileBuffer.close();
            postFileWriter.close();
            return true;
        } catch (IOException ex) {
            // In the event of failure, return false
            return false;
        }
    }
    
    private void loadEveryonesData(){
        try{
            // Create file reader with user data file
            FileReader userDataReader = new FileReader(USER_DATA_FILE);
            // Create buffer to loop through
            BufferedReader userDataBuffer = new BufferedReader(userDataReader);
            String line;
            // Loop through every line, until the next line is null
            for (int i = 0; (line = userDataBuffer.readLine()) != null; i++){
                // Split text file by spaces and sort data
                String[] data = line.split(" "); 
                // Assign data to temporary variables
                String userFirstName = data[0];
                String userLastName = data[1];
                String userAge = data[2].toString();
                String userIncome = data[3].toString();
                String userPostsCreated = data[4].toString();
                
                // Append data to arrays
                firstNames[i] = userFirstName;
                lastNames[i] = userLastName;
                allUserAges[i] = userAge;
                allUserIncomes[i] = userIncome;
                postsPerUser[i] = userPostsCreated;
            }
            // Close the buffer
            userDataBuffer.close();
        } catch(IOException e){
            System.out.println(e);
        }
    }
    private void loadPostData(){
        try{
            // Create file reader with user data file
            FileReader postDataReader = new FileReader(POST_DATA_FILE);
            // Create buffer to loop through
            BufferedReader postDataBuffer = new BufferedReader(postDataReader);
            String line;
            // Loop through every line, until the next line is null
            for (int i = 0; (line = postDataBuffer.readLine()) != null; i++){
                // Split text file by spaces and sort data
                String[] data = line.split(" "); 
                // Assign data to temporary variables
                String postText = data[0];
                String postURL = data[1];
                String postAuthor = data[2];

                // Append data to arrays
                instaPosts[i] = postText;
                instaImages[i] = postURL;
                instaAuthors[i] = postAuthor;
            }
            // Close the buffer
            postDataBuffer.close();
        } catch(IOException e){
            System.out.println(e);
        }
    }
    private void validatePostData(String postText, String postURL, String postAuthor) throws Exception{
        // Throw error if the strings have no data
        if(postText.equals("") || postURL.equals("")){
            throw new Exception("no_data");
        } 
        // Split the strings
        String[] postTextualData = postText.split(" ");
        String[] postAuthorData = postAuthor.split(" ");
        if(postTextualData.length > 1 || postAuthorData.length > 1){
            // If there is more than one word in text/author data, throw an error
            throw new Exception("data_too_long");
        } else if(!postURL.contains("https") || !postURL.contains("http")){
            // Cool that there is a specific exception for malformed URL's
            // Throw error if the URL has no protocol
            throw new MalformedURLException("no_protocol");
        }
    }
    private void displayPostData(){
        // Create a random number to display a random post 
        int randomNumber =(int)Math.round(Math.random()*(instaImages.length - 1) );
        // Display/set the post data with a random number
        try {
            setPostData(randomNumber);
        } catch (Exception e) {
            // Display an error _image_ in case there is an error (e.g. the user-provided-URL is malformed)
            setPostData(ERROR_URL, "Click Next Post Again!", "The Matrix" );
        }

    }
    private void setPostData(int position) throws MalformedURLException, IOException{
        // Create the URL for the image, with the random position
        URL imageURL = new URL(instaImages[position]);
        // Read the image in
        BufferedImage postImage = ImageIO.read(imageURL);
        // Resize the image (scale it to fit)
        Image resizedImage = postImage.getScaledInstance(lblPostImage.getWidth(), lblPostImage.getHeight(), 0);
        // Create an image icon out of it
        ImageIcon postIcon = new ImageIcon(resizedImage);
        // Set the icon of the label as well as post text and post author
        lblPostImage.setIcon(postIcon);
        lblPostImage.setText("");
        lblPostLabel.setText(instaPosts[position]);
        lblPostAuthor.setText("Post made by: " + instaAuthors[position]);
    }    
    // Overload the method for custom (non-random) posts (usually an error post)
    private void setPostData(String imageURL, String postLabel, String postAuthor ){   
        BufferedImage postImage;
        // Try Catch in case there is malformed URL
        // In theory, the catch will _never_ be called, because the URL is a constant
        try {
            // Read the image in
            postImage = ImageIO.read(new URL(imageURL));
            // Create an image icon out of it
            ImageIcon postIcon = new ImageIcon(postImage);
            // Set the icon of the label as well as post text and post author
            lblPostImage.setIcon(postIcon);
            lblPostImage.setText("");
            lblPostLabel.setText(postLabel);
            lblPostAuthor.setText("Post made by: " + postAuthor);
        } catch (MalformedURLException ex) {
            Logger.getLogger(AnwarAssignment27.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AnwarAssignment27.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void displayEveryonesData(){
        // Declare an initialize main average/highest variables
        int highestUserAge = 0;
        int averageUserAge = 0;
        int averagePostsPerUser= 0;
        int numberOfUsers = 0;
        int averageIncomeOfUsers = 0;
        // Declare and initialize totals
        int totalAges = 0;
        int totalPosts = 0;
        int totalIncome = 0;
        // Calculate highest user age and total users by looping through all ages
        for(String age: allUserAges){
            // Parse the string for the age number
            int ageNumber = Integer.parseInt(age);
            // If this age is higher than the highest age, set it as the highest
            if(ageNumber > highestUserAge){
                highestUserAge = ageNumber;
            }
            // Add the age to to total ages (for average age calculation)
            totalAges += ageNumber;
            // Increase the number of users, technically the length of a user-data array can also be used
            numberOfUsers += 1;
        }
        // Calculate total posts by looping through post array
        for(String post: postsPerUser){
            // Parse the string for the post number
            int postNumber = Integer.parseInt(post);
            // Add the post number to total posts
            totalPosts += postNumber;
        }        
        // Calculate the total income by looping through incomes array
        for(String income: allUserIncomes){
            // Parse the string for the post number
            int incomeNumber = Integer.parseInt(income);
            // Add the income number to total income
            totalIncome += incomeNumber;
        }
        // Calculate averages by dividing total by the array lengths
        averageUserAge = totalAges/allUserAges.length;
        averagePostsPerUser = totalPosts/postsPerUser.length;
        averageIncomeOfUsers = totalIncome/allUserIncomes.length;
        
        // Display the data (convert all integers to Strings)
        lblHighestUserAge.setText("Oldest User Age: " + Integer.toString(highestUserAge));
        lblAverageUserAge.setText("Average User Age: " + Integer.toString(averageUserAge));
        lblAverageUserPosts.setText("Average Number of Posts Per User: " + Integer.toString(averagePostsPerUser));
        lblNumberOfUsers.setText("Number of Users: " + Integer.toString(numberOfUsers));
        lblAverageUserIncome.setText("Average Income of Users: $" + Integer.toString(averageIncomeOfUsers));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnwarAssignment27.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnwarAssignment27.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnwarAssignment27.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnwarAssignment27.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnwarAssignment27().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePost;
    private javax.swing.JButton btnDisplayNextPost;
    private javax.swing.JButton btnSubmitData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblAverageUserAge;
    private javax.swing.JLabel lblAverageUserIncome;
    private javax.swing.JLabel lblAverageUserPosts;
    private javax.swing.JLabel lblDataSubmission;
    private javax.swing.JLabel lblHighestUserAge;
    private javax.swing.JLabel lblNumberOfUsers;
    private javax.swing.JLabel lblPostAuthor;
    private javax.swing.JPanel lblPostDataSubmission;
    private javax.swing.JLabel lblPostImage;
    private javax.swing.JLabel lblPostLabel;
    private javax.swing.JLabel lblPostSubmission;
    private javax.swing.JTextField txtPostData;
    private javax.swing.JTextField txtPostFirstName;
    private javax.swing.JTextField txtPostURL;
    private javax.swing.JTextField txtUserAge;
    private javax.swing.JTextField txtUserFirstName;
    private javax.swing.JTextField txtUserIncome;
    private javax.swing.JTextField txtUserLastName;
    private javax.swing.JTextField txtUserPostsMade;
    // End of variables declaration//GEN-END:variables
}
